// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  favorites UserFavorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Reddit and Opportunity models
model RedditPost {
  id              String   @id @default(cuid())
  redditId        String   @unique
  title           String
  content         String?  @db.Text
  subreddit       String
  author          String
  score           Int      @default(0)
  upvotes         Int      @default(0)
  downvotes       Int      @default(0)
  numComments     Int      @default(0)
  url             String?
  permalink       String?
  createdUtc      DateTime
  processedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Changed from one-to-one to many-to-many through OpportunitySource
  opportunitySources OpportunitySource[]

  @@index([subreddit])
  @@index([processedAt])
  @@index([createdUtc])
  @@index([title])
  @@index([author])
  @@index([title, author])
}

model OpportunitySource {
  id                   String   @id @default(cuid())
  opportunityId        String
  redditPostId         String
  sourceType           String   @default("post") // "post" or "comment"
  confidence           Float    @default(0.9) // AI confidence for this source
  
  opportunity          Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  redditPost           RedditPost @relation(fields: [redditPostId], references: [id], onDelete: Cascade)
  
  createdAt            DateTime @default(now())
  
  @@unique([opportunityId, redditPostId])
  @@index([opportunityId])
  @@index([redditPostId])
}

model Opportunity {
  id                    String   @id @default(cuid())
  title                 String
  description           String   @db.Text
  currentSolution       String?  @db.Text
  proposedSolution      String   @db.Text
  marketContext         String?  @db.Text
  implementationNotes   String?  @db.Text
  
  // Delta 4 scoring (0-10 scale)
  speedScore           Int      @default(0)
  convenienceScore     Int      @default(0)
  trustScore           Int      @default(0)
  priceScore           Int      @default(0)
  statusScore          Int      @default(0)
  predictabilityScore  Int      @default(0)
  uiUxScore            Int      @default(0)
  easeOfUseScore       Int      @default(0)
  legalFrictionScore   Int      @default(0)
  emotionalComfortScore Int     @default(0)
  
  overallScore         Float    @default(0.0)
  viabilityThreshold   Boolean  @default(false)
  
  // Metadata
  subreddit            String
  marketSize           String?  @default("Unknown")
  complexity           String?  @default("Medium")
  successProbability   String?  @default("Medium")
  
  // Multi-source tracking
  sourceCount          Int      @default(1)                 // Number of posts/comments that generated this idea
  
  // New categorization fields
  businessType         String?  @default("Unknown")        // AI-Powered, Non-AI, AI-Adjacent
  businessModel        String?  @default("Unknown")        // B2B, B2C, B2B2C
  revenueModel         String?  @default("Unknown")        // SaaS, Marketplace, Service, Product
  pricingModel         String?  @default("Unknown")        // Subscription, One-time, Commission, Freemium
  platform             String?  @default("Unknown")        // Web App, Mobile App, Desktop App, Hybrid
  mobileSupport        String?  @default("Unknown")        // iOS, Android, Cross-platform, Web-based
  deploymentType       String?  @default("Unknown")        // Browser Extension, API/SDK, Standalone, Cloud
  developmentType      String?  @default("Unknown")        // No-Code, Low-Code, Custom Development
  targetAudience       String?  @default("Unknown")        // Individual, Small Business, Enterprise, Developers
  userType             String?  @default("Unknown")        // Students, Professionals, Entrepreneurs, Creators
  technicalLevel       String?  @default("Unknown")        // Technical, Non-Technical, Mixed
  ageGroup             String?  @default("Unknown")        // Gen Z, Millennials, Gen X, Boomers, All Ages
  geography            String?  @default("Unknown")        // Global, US-Only, EU, Asia-Pacific, Emerging Markets
  marketType           String?  @default("Unknown")        // Urban, Rural, Suburban, Mixed
  economicLevel        String?  @default("Unknown")        // Developed, Developing, Mixed
  industryVertical     String?  @default("Unknown")        // Healthcare, Finance, Education, E-commerce, etc.
  niche                String?  @default("Unknown")        // Specific market niche (e.g., "AI prompt automation", "healthcare scheduling", etc.)
  developmentComplexity String? @default("Unknown")        // Simple, Medium, Complex
  teamSize             String?  @default("Unknown")        // Solo, Small Team, Large Team
  capitalRequirement   String?  @default("Unknown")        // Low, Medium, High
  developmentTime      String?  @default("Unknown")        // Quick MVP, Medium Development, Long Development
  marketSizeCategory   String?  @default("Unknown")        // Niche, Mass Market, Enterprise
  competitionLevel     String?  @default("Unknown")        // Low, Medium, High
  marketTrend          String?  @default("Unknown")        // Emerging, Established, Declining
  growthPotential      String?  @default("Unknown")        // Linear, Exponential, Network Effects
  acquisitionStrategy  String?  @default("Unknown")        // Viral, Word-of-Mouth, Paid, Organic
  scalabilityType      String?  @default("Unknown")        // Scalable, Service-Heavy, Location-Dependent
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations - Changed from one-to-one to many-to-many
  redditPosts          OpportunitySource[]
  
  // User interactions
  favoriteByUsers      UserFavorite[]
  
  // Market demand clustering
  marketDemandClusters MarketDemandOpportunity[]

  @@index([subreddit])
  @@index([overallScore])
  @@index([viabilityThreshold])
  @@index([createdAt])
  @@index([title])
  @@index([description])
  @@index([proposedSolution])
  @@index([businessType])
  @@index([industryVertical])
  @@index([niche])
}

model MarketDemandCluster {
  id                   String   @id @default(cuid())
  niche                String   // The specific niche/problem area
  demandSignal         String   @db.Text // The common request pattern
  embedding            Float[]  // Text embedding for similarity search
  occurrenceCount      Int      @default(1) // How many times this pattern appears
  subreddits           String[] // Which subreddits this appears in
  lastSeen             DateTime @default(now())
  
  // Related opportunities
  opportunities        MarketDemandOpportunity[]
  
  // Metadata
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@index([niche])
  @@index([occurrenceCount])
  @@index([lastSeen])
  @@unique([niche, demandSignal])
}

model MarketDemandOpportunity {
  id                   String   @id @default(cuid())
  clusterId            String
  opportunityId        String
  
  cluster              MarketDemandCluster @relation(fields: [clusterId], references: [id])
  opportunity          Opportunity @relation(fields: [opportunityId], references: [id])
  
  createdAt            DateTime @default(now())
  
  @@unique([clusterId, opportunityId])
}

model UserFavorite {
  id            String   @id @default(cuid())
  userId        String
  opportunityId String
  createdAt     DateTime @default(now())
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  opportunity  Opportunity  @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  
  @@unique([userId, opportunityId])
}

model SubredditCursor {
  id                   String   @id @default(cuid())
  subreddit            String   @unique
  lastRedditId         String   // Last processed Reddit post ID
  lastCreatedUtc       DateTime // Timestamp of last processed post
  postsProcessed       Int      @default(0)
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@index([subreddit])
}