// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  favorites UserFavorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Reddit and Opportunity models
model RedditPost {
  id              String   @id @default(cuid())
  redditId        String   @unique
  title           String
  content         String?  @db.Text
  subreddit       String
  author          String
  score           Int      @default(0)
  upvotes         Int      @default(0)
  downvotes       Int      @default(0)
  numComments     Int      @default(0)
  url             String?
  permalink       String?
  createdUtc      DateTime
  processedAt     DateTime?
  processingError String?  @db.Text
  
  // AI Analysis Results (for rejected posts)
  isOpportunity   Boolean? // true = opportunity, false = rejected, null = not processed
  rejectionReasons String[] @default([]) // Array of rejection reasons
  aiConfidence    Float?   // AI confidence score (0-1)
  aiAnalysisDate  DateTime? // When AI analysis was completed
  
  // Comment Analysis Status
  commentAnalysisStatus String? // "pending", "processing", "completed", "failed"
  commentAnalysisJobId  String? // Inngest job ID for tracking
  commentAnalysisStarted DateTime? // When comment analysis was started
  commentAnalysisCompleted DateTime? // When comment analysis was completed
  commentAnalysisError  String? @db.Text // Error message if analysis failed
  commentOpportunitiesFound Int? @default(0) // Number of opportunities found in comments
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Changed from one-to-one to many-to-many through OpportunitySource
  opportunitySources OpportunitySource[]
  
  // AI Usage Tracking
  costAnalyses       AIPostAnalysis[]

  @@index([subreddit])
  @@index([processedAt])
  @@index([createdUtc])
  @@index([title])
  @@index([author])
  @@index([title, author])
}

model OpportunitySource {
  id                   String   @id @default(cuid())
  opportunityId        String
  redditPostId         String
  sourceType           String   @default("post") // "post" or "comment"
  confidence           Float    @default(0.9) // AI confidence for this source
  
  opportunity          Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  redditPost           RedditPost @relation(fields: [redditPostId], references: [id], onDelete: Cascade)
  
  createdAt            DateTime @default(now())
  
  @@unique([opportunityId, redditPostId])
  @@index([opportunityId])
  @@index([redditPostId])
}

model Opportunity {
  id                    String   @id @default(cuid())
  title                 String
  description           String   @db.Text
  currentSolution       String?  @db.Text
  proposedSolution      String   @db.Text
  marketContext         String?  @db.Text
  implementationNotes   String?  @db.Text
  
  // Delta 4 scoring (0-10 scale)
  speedScore           Int      @default(0)
  convenienceScore     Int      @default(0)
  trustScore           Int      @default(0)
  priceScore           Int      @default(0)
  statusScore          Int      @default(0)
  predictabilityScore  Int      @default(0)
  uiUxScore            Int      @default(0)
  easeOfUseScore       Int      @default(0)
  legalFrictionScore   Int      @default(0)
  emotionalComfortScore Int     @default(0)
  
  overallScore         Float    @default(0.0)
  viabilityThreshold   Boolean  @default(false)
  
  // Metadata
  subreddit            String
  marketSize           String?  @default("Unknown")
  complexity           String?  @default("Medium")
  successProbability   String?  @default("Medium")
  
  // Multi-source tracking
  sourceCount          Int      @default(1)                 // Number of posts/comments that generated this idea
  
  // New categorization fields
  businessType         String?  @default("Unknown")        // AI-Powered, Non-AI, AI-Adjacent
  businessModel        String?  @default("Unknown")        // B2B, B2C, B2B2C
  revenueModel         String?  @default("Unknown")        // SaaS, Marketplace, Service, Product
  pricingModel         String?  @default("Unknown")        // Subscription, One-time, Commission, Freemium
  platform             String?  @default("Unknown")        // Web App, Mobile App, Desktop App, Hybrid
  mobileSupport        String?  @default("Unknown")        // iOS, Android, Cross-platform, Web-based
  deploymentType       String?  @default("Unknown")        // Browser Extension, API/SDK, Standalone, Cloud
  developmentType      String?  @default("Unknown")        // No-Code, Low-Code, Custom Development
  targetAudience       String?  @default("Unknown")        // Individual, Small Business, Enterprise, Developers
  userType             String?  @default("Unknown")        // Students, Professionals, Entrepreneurs, Creators
  technicalLevel       String?  @default("Unknown")        // Technical, Non-Technical, Mixed
  ageGroup             String?  @default("Unknown")        // Gen Z, Millennials, Gen X, Boomers, All Ages
  geography            String?  @default("Unknown")        // Global, US-Only, EU, Asia-Pacific, Emerging Markets
  marketType           String?  @default("Unknown")        // Urban, Rural, Suburban, Mixed
  economicLevel        String?  @default("Unknown")        // Developed, Developing, Mixed
  industryVertical     String?  @default("Unknown")        // Healthcare, Finance, Education, E-commerce, etc.
  niche                String?  @default("Unknown")        // Specific market niche (e.g., "AI prompt automation", "healthcare scheduling", etc.)
  developmentComplexity String? @default("Unknown")        // Simple, Medium, Complex
  teamSize             String?  @default("Unknown")        // Solo, Small Team, Large Team
  capitalRequirement   String?  @default("Unknown")        // Low, Medium, High
  developmentTime      String?  @default("Unknown")        // Quick MVP, Medium Development, Long Development
  marketSizeCategory   String?  @default("Unknown")        // Niche, Mass Market, Enterprise
  competitionLevel     String?  @default("Unknown")        // Low, Medium, High
  marketTrend          String?  @default("Unknown")        // Emerging, Established, Declining
  growthPotential      String?  @default("Unknown")        // Linear, Exponential, Network Effects
  acquisitionStrategy  String?  @default("Unknown")        // Viral, Word-of-Mouth, Paid, Organic
  scalabilityType      String?  @default("Unknown")        // Scalable, Service-Heavy, Location-Dependent
  
  // Market Validation Fields
  marketValidationScore Float?  @default(0.0)            // 0-10 score based on validation criteria
  engagementLevel      String?  @default("Unknown")      // Low, Medium, High (based on comments/upvotes)
  problemFrequency     String?  @default("Unknown")      // Rare, Occasional, Frequent, Very Frequent
  customerType         String?  @default("Unknown")      // Individual, Business, Both
  paymentWillingness   String?  @default("Unknown")      // Low, Medium, High (based on payment indicators)
  competitiveAnalysis  String?  @default("Unknown")      // No Competition, Low Competition, Medium Competition, High Competition
  validationTier       String?  @default("Unknown")      // Tier 1 (Build Now), Tier 2 (Validate Further), Tier 3 (Monitor)
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations - Changed from one-to-one to many-to-many
  redditPosts          OpportunitySource[]
  
  // User interactions
  favoriteByUsers      UserFavorite[]
  
  // Market demand clustering
  marketDemandClusters MarketDemandOpportunity[]
  
  // AI Usage Tracking
  costAnalyses         AIPostAnalysis[]

  @@index([subreddit])
  @@index([overallScore])
  @@index([viabilityThreshold])
  @@index([createdAt])
  @@index([title])
  @@index([description])
  @@index([proposedSolution])
  @@index([businessType])
  @@index([industryVertical])
  @@index([niche])
}

model MarketDemandCluster {
  id                   String   @id @default(cuid())
  niche                String   // The specific niche/problem area
  demandSignal         String   @db.Text // The common request pattern
  embedding            Float[]  // Text embedding for similarity search
  occurrenceCount      Int      @default(1) // How many times this pattern appears
  subreddits           String[] // Which subreddits this appears in
  lastSeen             DateTime @default(now())
  
  // Related opportunities
  opportunities        MarketDemandOpportunity[]
  
  // Metadata
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@index([niche])
  @@index([occurrenceCount])
  @@index([lastSeen])
  @@unique([niche, demandSignal])
}

model MarketDemandOpportunity {
  id                   String   @id @default(cuid())
  clusterId            String
  opportunityId        String
  
  cluster              MarketDemandCluster @relation(fields: [clusterId], references: [id])
  opportunity          Opportunity @relation(fields: [opportunityId], references: [id])
  
  createdAt            DateTime @default(now())
  
  @@unique([clusterId, opportunityId])
}

model UserFavorite {
  id            String   @id @default(cuid())
  userId        String
  opportunityId String
  createdAt     DateTime @default(now())
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  opportunity  Opportunity  @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  
  @@unique([userId, opportunityId])
}

model SubredditCursor {
  id                   String   @id @default(cuid())
  subreddit            String   @unique
  lastRedditId         String   // Last processed Reddit post ID
  lastCreatedUtc       DateTime // Timestamp of last processed post
  postsProcessed       Int      @default(0)
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@index([subreddit])
}

// AI Usage Tracking Models

// Core AI Usage Tracking
model AIUsageLog {
  id                   String   @id @default(cuid())
  
  // Request identification
  sessionId            String?                     // Links to AIAnalysisSession
  requestId            String   @unique            // Unique identifier for each API call
  
  // API call details
  model                String                      // gemini-2.5-pro, gemini-2.5-flash, etc.
  operation            String                      // individual, batch, fallback
  startTime            DateTime @default(now())
  endTime              DateTime?
  duration             Int?                        // Duration in milliseconds
  
  // Token usage
  inputTokens          Int      @default(0)
  outputTokens         Int      @default(0)
  totalTokens          Int      @default(0)
  
  // Cost calculation
  inputCost            Float    @default(0.0)      // Cost for input tokens
  outputCost           Float    @default(0.0)      // Cost for output tokens
  totalCost            Float    @default(0.0)      // Total cost for this call
  
  // Request context
  batchSize            Int?                        // Number of posts in batch (null for individual)
  batchMode            Boolean  @default(false)    // Whether batch pricing was used
  
  // Success/failure tracking
  success              Boolean  @default(false)
  errorMessage         String?  @db.Text
  httpStatusCode       Int?
  
  // Performance metrics
  promptTokens         Int      @default(0)        // Tokens used for prompt
  completionTokens     Int      @default(0)        // Tokens used for completion
  cacheHits            Int      @default(0)        // Context cache hits
  
  // Metadata
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  analysisSession      AIAnalysisSession? @relation(fields: [sessionId], references: [id])
  
  @@index([sessionId])
  @@index([model])
  @@index([operation])
  @@index([startTime])
  @@index([success])
  @@index([totalCost])
}

// Analysis Session Tracking (for batch operations)
model AIAnalysisSession {
  id                   String   @id @default(cuid())
  
  // Session identification
  sessionType          String                      // batch, individual, fallback
  triggeredBy          String?                     // manual-api, scheduled, etc.
  subreddit            String?                     // For batch operations
  
  // Session metrics
  postsRequested       Int      @default(0)        // Number of posts requested
  postsProcessed       Int      @default(0)        // Number of posts successfully processed
  opportunitiesFound   Int      @default(0)        // Number of opportunities created
  
  // Cost aggregation
  totalCost            Float    @default(0.0)      // Total cost for session
  averageCostPerPost   Float    @default(0.0)      // Average cost per post
  
  // Performance metrics
  totalDuration        Int?                        // Total duration in milliseconds
  averageDuration      Int?                        // Average duration per post
  
  // Success tracking
  successRate          Float    @default(0.0)      // Percentage of successful analyses
  errorCount           Int      @default(0)        // Number of errors
  
  // Timing
  startTime            DateTime @default(now())
  endTime              DateTime?
  
  // Metadata
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  usageLogs            AIUsageLog[]
  postAnalyses         AIPostAnalysis[]
  
  @@index([sessionType])
  @@index([subreddit])
  @@index([startTime])
  @@index([totalCost])
  @@index([successRate])
}

// Per-Post Analysis Cost Tracking
model AIPostAnalysis {
  id                   String   @id @default(cuid())
  
  // Post identification
  redditPostId         String                      // Links to RedditPost
  postTitle            String                      // Cached for reporting
  subreddit            String                      // Cached for reporting
  
  // Analysis details
  sessionId            String?                     // Links to AIAnalysisSession
  analysisType         String                      // individual, batch, fallback
  model                String                      // AI model used
  
  // Cost metrics
  totalCost            Float    @default(0.0)      // Total cost for this post
  inputCost            Float    @default(0.0)      // Cost for input tokens
  outputCost           Float    @default(0.0)      // Cost for output tokens
  
  // Token usage
  inputTokens          Int      @default(0)
  outputTokens         Int      @default(0)
  totalTokens          Int      @default(0)
  
  // Analysis outcome
  isOpportunity        Boolean  @default(false)    // Whether an opportunity was found
  opportunityId        String?                     // Links to Opportunity if found
  confidence           Float?                      // AI confidence score
  overallScore         Float?                      // Delta 4 overall score
  
  // Performance metrics
  processingTime       Int?                        // Time to process in milliseconds
  retryCount           Int      @default(0)        // Number of retries
  
  // Success tracking
  success              Boolean  @default(false)
  errorMessage         String?  @db.Text
  
  // Metadata
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  session              AIAnalysisSession? @relation(fields: [sessionId], references: [id])
  redditPost           RedditPost @relation(fields: [redditPostId], references: [id])
  opportunity          Opportunity? @relation(fields: [opportunityId], references: [id])
  
  @@index([redditPostId])
  @@index([sessionId])
  @@index([subreddit])
  @@index([analysisType])
  @@index([model])
  @@index([totalCost])
  @@index([isOpportunity])
  @@index([createdAt])
  @@unique([redditPostId, sessionId])
}

// Daily Usage Aggregation
model AIDailyUsage {
  id                   String   @id @default(cuid())
  
  // Date tracking
  date                 DateTime @db.Date           // Date for aggregation
  
  // Usage metrics
  totalRequests        Int      @default(0)        // Total API requests
  successfulRequests   Int      @default(0)        // Successful API requests
  failedRequests       Int      @default(0)        // Failed API requests
  
  // Cost metrics
  totalCost            Float    @default(0.0)      // Total cost for the day
  averageCostPerRequest Float   @default(0.0)      // Average cost per request
  
  // Token usage
  totalInputTokens     Int      @default(0)
  totalOutputTokens    Int      @default(0)
  totalTokens          Int      @default(0)
  
  // Analysis metrics
  postsAnalyzed        Int      @default(0)        // Total posts analyzed
  opportunitiesFound   Int      @default(0)        // Total opportunities found
  averageCostPerPost   Float    @default(0.0)      // Average cost per post
  costPerOpportunity   Float    @default(0.0)      // Cost per opportunity found
  
  // Performance metrics
  averageResponseTime  Int?                        // Average response time in ms
  successRate          Float    @default(0.0)      // Success rate percentage
  
  // Model breakdown (JSON for flexibility)
  modelUsage           Json?                       // Usage breakdown by model
  
  // Metadata
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@unique([date])
  @@index([date])
  @@index([totalCost])
  @@index([postsAnalyzed])
  @@index([opportunitiesFound])
}

// Model-specific Usage Tracking
model AIModelUsage {
  id                   String   @id @default(cuid())
  
  // Model identification
  model                String                      // gemini-2.5-pro, gemini-2.5-flash, etc.
  date                 DateTime @db.Date           // Date for aggregation
  
  // Usage metrics
  requestCount         Int      @default(0)        // Number of requests
  successCount         Int      @default(0)        // Successful requests
  failureCount         Int      @default(0)        // Failed requests
  
  // Cost metrics
  totalCost            Float    @default(0.0)      // Total cost for this model
  averageCostPerRequest Float   @default(0.0)      // Average cost per request
  
  // Token usage
  totalInputTokens     Int      @default(0)
  totalOutputTokens    Int      @default(0)
  totalTokens          Int      @default(0)
  
  // Performance metrics
  averageResponseTime  Int?                        // Average response time in ms
  successRate          Float    @default(0.0)      // Success rate percentage
  
  // Operation breakdown
  individualRequests   Int      @default(0)        // Individual analysis requests
  batchRequests        Int      @default(0)        // Batch analysis requests
  fallbackRequests     Int      @default(0)        // Fallback requests
  
  // Metadata
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@unique([model, date])
  @@index([model])
  @@index([date])
  @@index([totalCost])
  @@index([successRate])
}

// Cost Alerts and Thresholds
model AICostAlert {
  id                   String   @id @default(cuid())
  
  // Alert configuration
  alertType            String                      // daily, weekly, monthly, threshold
  threshold            Float                       // Cost threshold
  period               String                      // daily, weekly, monthly
  
  // Alert details
  description          String   @db.Text
  isActive             Boolean  @default(true)
  
  // Notification settings
  emailNotification    Boolean  @default(true)
  slackNotification    Boolean  @default(false)
  
  // Alert history
  lastTriggered        DateTime?
  triggerCount         Int      @default(0)
  
  // Metadata
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@index([alertType])
  @@index([isActive])
  @@index([threshold])
}

// Cost Optimization Recommendations
model AICostOptimization {
  id                   String   @id @default(cuid())
  
  // Recommendation details
  type                 String                      // model-switch, batch-optimization, etc.
  title                String
  description          String   @db.Text
  
  // Potential savings
  potentialSavings     Float    @default(0.0)      // Estimated cost savings
  savingsPercentage    Float    @default(0.0)      // Percentage savings
  
  // Implementation details
  implementation       String   @db.Text           // How to implement
  priority             String   @default("medium") // high, medium, low
  
  // Status tracking
  status               String   @default("pending") // pending, implemented, dismissed
  implementedAt        DateTime?
  
  // Metadata
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@index([type])
  @@index([priority])
  @@index([status])
  @@index([potentialSavings])
}