// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  favorites UserFavorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Reddit and Opportunity models
model RedditPost {
  id              String   @id @default(cuid())
  redditId        String   @unique
  title           String
  content         String?  @db.Text
  subreddit       String
  author          String
  score           Int      @default(0)
  upvotes         Int      @default(0)
  downvotes       Int      @default(0)
  numComments     Int      @default(0)
  url             String?
  permalink       String?
  createdUtc      DateTime
  processedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  opportunity Opportunity?

  @@index([subreddit])
  @@index([processedAt])
  @@index([createdUtc])
}

model Opportunity {
  id                    String   @id @default(cuid())
  title                 String
  description           String   @db.Text
  currentSolution       String?  @db.Text
  proposedSolution      String   @db.Text
  marketContext         String?  @db.Text
  implementationNotes   String?  @db.Text
  
  // Delta 4 scoring (0-10 scale)
  speedScore           Int      @default(0)
  convenienceScore     Int      @default(0)
  trustScore           Int      @default(0)
  priceScore           Int      @default(0)
  statusScore          Int      @default(0)
  predictabilityScore  Int      @default(0)
  uiUxScore            Int      @default(0)
  easeOfUseScore       Int      @default(0)
  legalFrictionScore   Int      @default(0)
  emotionalComfortScore Int     @default(0)
  
  overallScore         Float    @default(0.0)
  viabilityThreshold   Boolean  @default(false)
  
  // Metadata
  subreddit            String
  marketSize           String?  @default("Unknown")
  complexity           String?  @default("Medium")
  successProbability   String?  @default("Medium")
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  redditPostId         String   @unique
  redditPost           RedditPost @relation(fields: [redditPostId], references: [id])
  
  // User interactions
  favoriteByUsers      UserFavorite[]

  @@index([subreddit])
  @@index([overallScore])
  @@index([viabilityThreshold])
  @@index([createdAt])
}

model UserFavorite {
  id            String   @id @default(cuid())
  userId        String
  opportunityId String
  createdAt     DateTime @default(now())
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  opportunity  Opportunity  @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  
  @@unique([userId, opportunityId])
}
